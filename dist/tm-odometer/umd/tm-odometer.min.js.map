{"version":3,"file":"tm-odometer.min.js","sources":["../../../../../src/lib/shared/templates.ts","../../../../../src/lib/shared/settings.ts","../../../../../src/lib/utils/compatibility.ts","../../../../../src/lib/utils/utilities.ts","../../../../../src/lib/core/tm-odometer.ts"],"sourcesContent":["/**\n * Templates for odometer elements\n */\n\nconst VALUE_HTML = '<span class=\"odometer-value\"></span>';\nconst RIBBON_HTML =\n  '<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">' +\n  VALUE_HTML +\n  '</span></span>';\nconst DIGIT_HTML =\n  '<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">' +\n  RIBBON_HTML +\n  '</span></span>';\nconst FORMAT_MARK_HTML = '<span class=\"odometer-formatting-mark\"></span>';\n\nexport { DIGIT_HTML, FORMAT_MARK_HTML };\n","/**\n * Settings\n */\n\n// Default odometer configuration\n\n// The bit within the parenthesis will be repeated, so (,ddd) becomes 123,456,789....\n//\n// If your locale uses spaces to separate digits, you could consider using a\n// Narrow No-Break Space ( ), as it's a bit more correct.\n//\n// Numbers will be rounded to the number of digits after the radix separator.\n//\n// When values are set using `.update` or the `.innerHTML`-type attributes,\n// strings are assumed to already be in the locale's format.\n//\n// This is just the default, it can also be set as options.format.\nconst DIGIT_FORMAT = '(,ddd).dd';\n\nconst FORMAT_PARSER = /^\\(?([^)]*)\\)?(?:(.)(d+))?$/;\n\n// What is our target framerate?\nconst FRAMERATE = 30;\n\n// How long will the animation last?\nconst DURATION = 2000;\n\n// What is the fastest we should update values when we are\n// counting up (not using the wheel animation).\nconst COUNT_FRAMERATE = 20;\n\n// What is the minimum number of frames for each value on the wheel?\n// We won't render more values than could be reasonably seen\nconst FRAMES_PER_VALUE = 2;\n\n// If more than one digit is hitting the frame limit, they would all get\n// capped at that limit and appear to be moving at the same rate.  This\n// factor adds a boost to subsequent digits to make them appear faster.\nconst DIGIT_SPEEDBOOST = 0.5;\n\nconst MS_PER_FRAME = 1000 / FRAMERATE;\nconst COUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE;\n\nexport {\n  DIGIT_FORMAT,\n  FORMAT_PARSER,\n  DURATION,\n  FRAMES_PER_VALUE,\n  DIGIT_SPEEDBOOST,\n  MS_PER_FRAME,\n  COUNT_MS_PER_FRAME,\n};\n","/**\n * Compatibility Layer\n */\n\nconst TRANSITION_END_EVENTS =\n  'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';\n\nconst transitionCheckStyles = document.createElement('div').style;\nconst TRANSITION_SUPPORT =\n  transitionCheckStyles.transition != null ||\n  transitionCheckStyles.webkitTransition != null ||\n  transitionCheckStyles.mozTransition != null ||\n  transitionCheckStyles.oTransition != null;\n\nconst requestAnimationFrame =\n  window.requestAnimationFrame ||\n  window.mozRequestAnimationFrame ||\n  window.webkitRequestAnimationFrame ||\n  window.msRequestAnimationFrame;\n\nconst MutationObserver =\n  window.MutationObserver ||\n  window.WebKitMutationObserver ||\n  window.MozMutationObserver;\n\nlet _jQueryWrapped = false;\n\n/**\n * Wraps jQuery's `.html` and `.text` methods to ensure they update the odometer\n * when called on elements with an associated `TmOdometer` instance.\n * This function is idempotent and will only execute once.\n * @returns {void}\n */\nconst wrapJQuery = (): void => {\n  if (_jQueryWrapped) {\n    return;\n  }\n\n  if (window.jQuery) {\n    _jQueryWrapped = true;\n    // We need to wrap jQuery's .html and .text because they don't always\n    // call .innerHTML/.innerText\n    for (const property of ['html', 'text']) {\n      const old = window.jQuery!.fn[property];\n      window.jQuery!.fn[property] = function (val?: any) {\n        if (val == null || this[0]?.odometer == null) {\n          return old.apply(this, arguments);\n        }\n        return this[0].odometer.update(val);\n      };\n    }\n  }\n};\n\n/**\n * Attempts to wrap jQuery's `.html` and `.text` methods immediately to ensure they\n * update the odometer when called on elements with an associated `TmOdometer` instance.\n * Also schedules a retry using `setTimeout` in case jQuery is loaded after this file.\n * @returns {void}\n */\nconst tryWrapJQuery = (): void => {\n  wrapJQuery();\n  // In case jQuery is brought in after this file\n  setTimeout(wrapJQuery, 0);\n};\n\nexport {\n  TRANSITION_END_EVENTS,\n  TRANSITION_SUPPORT,\n  requestAnimationFrame,\n  MutationObserver,\n  tryWrapJQuery,\n};\n","/**\n * Utility Functions\n */\n\nimport { type TmOdometer } from '../core/tm-odometer';\n\n/**\n * Creates an HTML element from the given HTML string.\n * Assumes the HTML string contains a single root element.\n * @param {string} html - The HTML string to convert to an element.\n * @returns {HTMLElement} The first child element created from the HTML string.\n * @throws {Error} If the HTML string is empty or does not contain a valid element.\n */\nconst createFromHTML = (html: string): HTMLElement => {\n  const el = document.createElement('div');\n  el.innerHTML = html;\n  if (!el.children[0]) {\n    throw new Error('Invalid HTML: No valid root element found.');\n  }\n  return el.children[0] as HTMLElement;\n};\n\n/**\n * Removes one or more class names from an element.\n * If any of the class names do not exist, they are ignored.\n * @param {HTMLElement} el - The element to remove the class(es) from.\n * @param {string} name - A space-separated string of class names to remove.\n * @returns {string} The updated `className` string of the element (may contain leading/trailing spaces).\n */\nconst removeClass = (el: HTMLElement, name: string): string =>\n  (el.className = el.className.replace(\n    new RegExp(`(^| )${name.split(' ').join('|')}( |$)`, 'gi'),\n    ' '\n  ));\n\n/**\n * Adds one or more class names to an element.\n * If any of the class names already exist, they will not be duplicated.\n * @param {HTMLElement} el - The element to add the class(es) to.\n * @param {string} name - A space-separated string of class names to add.\n * @returns {string} The updated `className` string of the element (may contain leading/trailing spaces).\n */\nconst addClass = (el: HTMLElement, name: string): string => {\n  removeClass(el, name);\n  return (el.className += ` ${name}`);\n};\n\n/**\n * Triggers a custom DOM event on the specified element.\n * Supports modern browsers and provides a fallback for older browsers (e.g., IE9+).\n * @param {HTMLElement} el - The element on which to dispatch the event.\n * @param {string} name - The name of the event to trigger.\n */\nconst trigger = (el: HTMLElement, name: string): void => {\n  // Custom DOM events are not supported in IE8\n  if (typeof CustomEvent === 'function') {\n    const evt = new CustomEvent(name, { bubbles: true, cancelable: true });\n    el.dispatchEvent(evt);\n  } else if (document.createEvent) {\n    // Legacy fallback\n    const evt = document.createEvent('HTMLEvents');\n    evt.initEvent(name, true, true);\n    el.dispatchEvent(evt);\n  }\n};\n\n/**\n * Returns the current timestamp in milliseconds.\n * Uses `window.performance.now()` if available for higher precision,\n * falling back to `Date.now()` if not.\n * @returns {number} The current timestamp in milliseconds.\n */\nconst now = (): number => {\n  const left = window.performance?.now?.();\n  return left ?? +new Date();\n};\n\n/**\n * Rounds a number to the specified precision.\n * If no precision is provided, the number is rounded to the nearest integer.\n * @param {number} val - The number to round.\n * @param {number} [precision=0] - The number of decimal places to round to. Defaults to 0.\n * @returns {number} The rounded number.\n */\nconst round = (val: number, precision?: number): number => {\n  precision ??= 0;\n  if (!precision) {\n    return Math.round(val);\n  }\n\n  val *= Math.pow(10, precision);\n  val += 0.5;\n  val = Math.floor(val);\n  return (val /= Math.pow(10, precision));\n};\n\n/**\n * Truncates a number by removing its fractional part.\n * For positive numbers, it behaves like `Math.floor`.\n * For negative numbers, it behaves like `Math.ceil`.\n * @param {number} val - The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncate = (val: number): number => {\n  // | 0 fails on numbers greater than 2^32\n  if (val < 0) {\n    return Math.ceil(val);\n  } else {\n    return Math.floor(val);\n  }\n};\n\n/**\n * Calculates the fractional part of a number.\n * The fractional part is the difference between the number and its rounded value.\n * @param {number} val - The number to extract the fractional part from.\n * @returns {number} The fractional part of the number.\n */\nconst fractionalPart = (val: number): number => val - round(val);\n\n/**\n * Initializes global options for the provided `TmOdometer` class with a deferred execution.\n * Sets the static `options` object of the `TmOdometer` class based on `window.odometerOptions`.\n * This allows users to configure `window.odometerOptions` after the script has been loaded.\n * The function re-checks `window.odometerOptions` after a short timeout to apply any late configurations.\n * @param {typeof TmOdometer} TmOdometerClass - The `TmOdometer` class to initialize options for.\n * @returns {void}\n */\nconst initGlobalOptionsDeferred = (\n  TmOdometerClass: typeof TmOdometer\n): void => {\n  setTimeout(() => {\n    // We do this in a separate pass to allow people to set\n    // window.odometerOptions after bringing the file in.\n    if (window.odometerOptions) {\n      for (const key in window.odometerOptions) {\n        TmOdometerClass.options[key] ??= window.odometerOptions[key];\n      }\n    }\n  }, 0);\n};\n\n/**\n * Initializes all existing `TmOdometer` instances on the page when the DOM is fully loaded.\n * Supports both modern browsers and legacy browsers (e.g., IE < 9).\n * Ensures that initialization occurs after the DOM is ready, using `DOMContentLoaded` for modern browsers\n * and `onreadystatechange` for older browsers.\n * @param {typeof TmOdometer} TmOdometerClass - The `TmOdometer` class to initialize instances for.\n * @returns {void}\n */\nconst initExistingOdometers = (TmOdometerClass: typeof TmOdometer): void => {\n  // Check for legacy IE < 9\n  if (document.documentElement?.doScroll && document.createEventObject) {\n    // Use `onreadystatechange` for legacy browsers\n    const _old = document.onreadystatechange;\n    document.onreadystatechange = function () {\n      if (\n        document.readyState === 'complete' &&\n        TmOdometerClass.options.auto !== false\n      ) {\n        TmOdometerClass.init();\n      }\n\n      // Call the previous handler if it exists\n      if (_old) {\n        _old?.apply(this, arguments as any);\n      }\n    };\n  } else {\n    // Use `DOMContentLoaded` for modern browsers\n    document.addEventListener(\n      'DOMContentLoaded',\n      function () {\n        if (TmOdometerClass.options.auto !== false) {\n          TmOdometerClass.init();\n        }\n      },\n      false\n    );\n  }\n};\n\nexport {\n  createFromHTML,\n  removeClass,\n  addClass,\n  trigger,\n  now,\n  round,\n  truncate,\n  fractionalPart,\n  initGlobalOptionsDeferred,\n  initExistingOdometers,\n};\n","/**\n * TmOdometer Core Class\n */\n\nimport {\n  FormatObject,\n  OdometerOptions,\n  TmOdometerOptions,\n} from '../shared/interfaces';\nimport { DIGIT_HTML, FORMAT_MARK_HTML } from '../shared/templates';\nimport {\n  DIGIT_FORMAT,\n  FORMAT_PARSER,\n  DURATION,\n  FRAMES_PER_VALUE,\n  DIGIT_SPEEDBOOST,\n  MS_PER_FRAME,\n  COUNT_MS_PER_FRAME,\n} from '../shared/settings';\nimport {\n  TRANSITION_END_EVENTS,\n  TRANSITION_SUPPORT,\n  requestAnimationFrame,\n  MutationObserver,\n  tryWrapJQuery,\n} from '../utils/compatibility';\nimport {\n  createFromHTML,\n  removeClass,\n  addClass,\n  trigger,\n  now,\n  round,\n  truncate,\n  initGlobalOptionsDeferred,\n  initExistingOdometers,\n} from '../utils/utilities';\n\nclass TmOdometer {\n  static options: OdometerOptions = window.odometerOptions ?? {};\n\n  options: TmOdometerOptions;\n  el: HTMLElement;\n  value: number = 0;\n  inside!: HTMLElement;\n  observer?: MutationObserver;\n  watchMutations: boolean = false;\n  transitionEndBound: boolean = false;\n  format: FormatObject = { repeating: '', precision: 0 };\n  MAX_VALUES!: number;\n  digits: HTMLElement[] = [];\n  ribbons: Record<number, HTMLElement> = {};\n\n  /**\n   * Initializes a new instance of the TmOdometer class.\n   * Sets up the odometer's options, formats, and DOM structure.\n   * If an odometer instance already exists on the element, it returns the existing instance.\n   * @param {TmOdometerOptions} options - Configuration options for the odometer.\n   */\n  constructor(options: TmOdometerOptions) {\n    this.options = options;\n    this.el = this.options.el;\n    if (this.el.odometer) {\n      return this.el.odometer;\n    }\n\n    this.el.odometer = this;\n\n    for (const key in TmOdometer.options) {\n      const value = TmOdometer.options[key];\n      this.options[key] ??= value;\n    }\n\n    this.options.duration ??= DURATION;\n    this.MAX_VALUES =\n      (this.options.duration / MS_PER_FRAME / FRAMES_PER_VALUE) | 0;\n\n    this.resetFormat();\n\n    this.value = this.cleanValue(this.options.value ?? '');\n\n    this.renderInside();\n    this.render();\n\n    try {\n      for (const property of ['innerHTML', 'innerText', 'textContent']) {\n        if (this.el[property as keyof HTMLElement]) {\n          Object.defineProperty(this.el, property, {\n            get: (): string => {\n              if (property === 'innerHTML') {\n                return this.inside.outerHTML;\n              } else {\n                // It's just a single HTML element, so innerText is the\n                // same as outerText.\n                return this.inside.innerText ?? this.inside.textContent ?? '';\n              }\n            },\n            set: (val: string) => {\n              return this.update(val);\n            },\n          });\n        }\n      }\n    } catch (e) {\n      // Safari\n      this.watchForMutations();\n    }\n  }\n\n  /**\n   * Renders the inner container of the odometer.\n   * Clears the root element (`this.el`) and appends a new child element\n   * with the class `odometer-inside`.\n   * @returns {void}\n   */\n  renderInside(): void {\n    this.inside = document.createElement('div');\n    this.inside.className = 'odometer-inside';\n    this.el.innerHTML = '';\n    this.el.appendChild(this.inside);\n  }\n\n  /**\n   * Observes changes to the root element's content and updates the odometer accordingly.\n   * This is a fallback for environments like Safari where `.innerHTML` cannot be wrapped.\n   * @returns {void}\n   */\n  watchForMutations(): void {\n    if (!MutationObserver) {\n      return;\n    }\n\n    try {\n      this.observer ??= new MutationObserver((mutations) => {\n        const newVal = this.el.innerText || '';\n\n        this.renderInside();\n        this.render(this.value);\n        this.update(newVal);\n      });\n\n      this.watchMutations = true;\n      this.startWatchingMutations();\n    } catch (e) {}\n  }\n\n  /**\n   * Starts observing mutations on the root element (`this.el`).\n   * Listens for changes to the element's child nodes (e.g., additions or removals).\n   * Requires `this.watchMutations` to be `true` and a `MutationObserver` to be initialized.\n   * @returns {void}\n   */\n  startWatchingMutations(): void {\n    if (this.watchMutations) {\n      this.observer?.observe(this.el, { childList: true });\n    }\n  }\n\n  /**\n   * Stops observing mutations on the root element (`this.el`).\n   * Disconnects the `MutationObserver` if it is initialized.\n   * @returns {void}\n   */\n  stopWatchingMutations(): void {\n    this.observer?.disconnect();\n  }\n\n  /**\n   * Cleans and normalizes a value to ensure it can be processed as a number.\n   * Converts formatted strings into numeric values by handling radix symbols\n   * and removing unnecessary characters.\n   * @param {string | number} val - The value to clean and normalize.\n   * @returns {number} The cleaned and rounded numeric value.\n   */\n  cleanValue(val: string | number): number {\n    if (typeof val === 'string') {\n      // We need to normalize the format so we can properly turn it into\n      // a float.\n      val = val.replace(this.format.radix ?? '.', '<radix>');\n      val = val.replace(/[.,]/g, '');\n      val = val.replace('<radix>', '.');\n      val = parseFloat(val) || 0;\n    }\n\n    return round(val, this.format.precision);\n  }\n\n  /**\n   * Binds transition end events to the root element (`this.el`).\n   * Ensures that the odometer re-renders only once per transition, even if multiple\n   * transition end events are triggered. After rendering, it dispatches the\n   * `odometerdone` custom event.\n   * @returns {void}\n   */\n  bindTransitionEnd(): void {\n    if (this.transitionEndBound) {\n      return;\n    }\n    this.transitionEndBound = true;\n\n    // The event will be triggered once for each ribbon, we only\n    // want one render though\n    let renderEnqueued = false;\n    const events = TRANSITION_END_EVENTS.split(' ');\n    for (const event of events) {\n      this.el.addEventListener(\n        event,\n        () => {\n          if (renderEnqueued) {\n            return true;\n          }\n\n          renderEnqueued = true;\n\n          setTimeout(() => {\n            this.render();\n            renderEnqueued = false;\n            trigger(this.el, 'odometerdone');\n          }, 0);\n\n          return true;\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * Resets and parses the odometer's format configuration.\n   * Extracts the repeating pattern, radix symbol, and precision from the format string.\n   * Throws an error if the format string is invalid or unparsable.\n   * @returns {void}\n   */\n  resetFormat(): void {\n    let format = this.options.format ?? DIGIT_FORMAT;\n    format = format || 'd';\n\n    const parsed = FORMAT_PARSER.exec(format);\n    if (!parsed) {\n      throw new Error('TmOdometer: Unparsable digit format');\n    }\n\n    const [_, repeating, radix, fractional] = parsed;\n\n    const precision = fractional?.length || 0;\n\n    this.format = { repeating, radix, precision };\n  }\n\n  /**\n   * Renders the odometer with the specified value.\n   * Updates the DOM structure, applies the appropriate theme and classes,\n   * and formats the digits for display.\n   * @param {number} [value] - The value to render. Defaults to the current value (`this.value`).\n   * @returns {void}\n   */\n  render(value?: number): void {\n    value ??= this.value;\n    this.stopWatchingMutations();\n    this.resetFormat();\n\n    this.inside.innerHTML = '';\n\n    let { theme } = this.options;\n\n    const classes = this.el.className.split(' ');\n    const newClasses: string[] = [];\n    for (const cls of classes) {\n      if (cls.length) {\n        const match = /^odometer-theme-(.+)$/.exec(cls);\n        if (match) {\n          theme = match[1];\n          continue;\n        }\n\n        if (/^odometer(-|$)/.test(cls)) {\n          continue;\n        }\n\n        newClasses.push(cls);\n      }\n    }\n\n    newClasses.push('odometer');\n\n    if (!TRANSITION_SUPPORT) {\n      newClasses.push('odometer-no-transitions');\n    }\n\n    if (theme) {\n      newClasses.push(`odometer-theme-${theme}`);\n    } else {\n      // This class matches all themes, so it should do what you'd expect if only one\n      // theme css file is brought into the page.\n      newClasses.push('odometer-auto-theme');\n    }\n\n    this.el.className = newClasses.join(' ');\n\n    this.ribbons = {};\n\n    this.formatDigits(value);\n\n    this.startWatchingMutations();\n  }\n\n  /**\n   * Formats the given value into individual digits and renders them.\n   * If a custom format function is provided, it uses that to format the value.\n   * Otherwise, it preserves the precision and formats the value based on the odometer's configuration.\n   * @param {number} value - The value to format and render as digits.\n   * @returns {void}\n   */\n  formatDigits(value: number): void {\n    this.digits = [];\n\n    if (this.options.formatFunction) {\n      const valueString = this.options.formatFunction(value);\n      for (const valueDigit of valueString.split('').reverse()) {\n        if (valueDigit.match(/0-9/)) {\n          const digit = this.renderDigit();\n          digit.querySelector('.odometer-value')!.innerHTML = valueDigit;\n          this.digits.push(digit);\n          this.insertDigit(digit);\n        } else {\n          this.addSpacer(valueDigit);\n        }\n      }\n    } else {\n      const valueString = this.preservePrecision(value);\n      let wholePart = !this.format.precision;\n      for (const digit of valueString.split('').reverse()) {\n        if (digit === '.') {\n          wholePart = true;\n        }\n        this.addDigit(digit, wholePart);\n      }\n    }\n  }\n\n  /**\n   * Ensures the value maintains the specified precision by adding trailing zeros if necessary.\n   * This is used to keep the decimal places consistent at the end of the animation.\n   * @param {number} value - The numeric value to format with preserved precision.\n   * @returns {string} The value as a string with the required precision.\n   */\n  preservePrecision(value: number): string {\n    // This function fixes the precision at the end of the animation keeping the\n    // decimal places even if we have 0 digits only\n    let fixedValue: string = value.toString();\n    if (this.format.precision) {\n      const parts = fixedValue.split('.');\n      if (parts.length === 1) {\n        fixedValue += '.';\n        parts[1] = '';\n      }\n      for (let i = 0; i < this.format.precision; i++) {\n        if (!parts[1][i]) {\n          fixedValue += '0';\n        }\n      }\n    }\n    return fixedValue;\n  }\n\n  /**\n   * Updates the odometer to display a new value.\n   * Cleans and normalizes the input value, determines the difference from the current value,\n   * and triggers the appropriate animations and DOM updates.\n   * @param {string | number} newValue - The new value to update the odometer to.\n   * @returns {number} The updated value of the odometer.\n   */\n  update(newValue: string | number): number {\n    newValue = this.cleanValue(newValue);\n\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - this.value;\n    if (!diff) {\n      return this.value;\n    }\n\n    removeClass(\n      this.el,\n      'odometer-animating-up odometer-animating-down odometer-animating'\n    );\n    if (diff > 0) {\n      addClass(this.el, 'odometer-animating-up');\n    } else {\n      addClass(this.el, 'odometer-animating-down');\n    }\n\n    this.stopWatchingMutations();\n    this.animate(newValue);\n    this.startWatchingMutations();\n\n    setTimeout(() => {\n      // Force a repaint\n      this.el.offsetHeight;\n      addClass(this.el, 'odometer-animating');\n    }, 0);\n\n    this.value = newValue;\n\n    return this.value;\n  }\n\n  /**\n   * Creates and returns a new digit element for the odometer.\n   * The digit element is generated from the predefined `DIGIT_HTML` template.\n   * @returns {HTMLElement} The newly created digit element.\n   */\n  renderDigit(): HTMLElement {\n    return createFromHTML(DIGIT_HTML);\n  }\n\n  /**\n   * Inserts a digit element into the odometer's inner container.\n   * If a reference element (`before`) is provided, the digit is inserted before it.\n   * Otherwise, the digit is appended to the container or inserted at the beginning if other children exist.\n   * @param {HTMLElement} digit - The digit element to insert.\n   * @param {HTMLElement | null} [before] - The reference element to insert the digit before. Defaults to `null`.\n   * @returns {HTMLElement} The inserted digit element.\n   */\n  insertDigit(digit: HTMLElement, before?: HTMLElement | null): HTMLElement {\n    if (before) {\n      return this.inside.insertBefore(digit, before);\n    } else if (!this.inside.children.length) {\n      return this.inside.appendChild(digit);\n    } else {\n      return this.inside.insertBefore(digit, this.inside.children[0]);\n    }\n  }\n\n  /**\n   * Creates and inserts a spacer element into the odometer's inner container.\n   * A spacer is a non-digit element (e.g., a comma or decimal point) used for formatting.\n   * @param {string} chr - The character to display in the spacer.\n   * @param {HTMLElement | null} [before] - The reference element to insert the spacer before. Defaults to `null`.\n   * @param {string} [extraClasses] - Additional CSS classes to apply to the spacer element.\n   * @returns {HTMLElement} The inserted spacer element.\n   */\n  addSpacer(\n    chr: string,\n    before?: HTMLElement | null,\n    extraClasses?: string\n  ): HTMLElement {\n    const spacer = createFromHTML(FORMAT_MARK_HTML);\n    spacer.innerHTML = chr;\n    if (extraClasses) {\n      addClass(spacer, extraClasses);\n    }\n    return this.insertDigit(spacer, before);\n  }\n\n  /**\n   * Adds a digit or spacer element to the odometer's inner container.\n   * Handles special cases for negation (`-`) and radix (`.`) characters,\n   * and ensures the format's repeating pattern is respected.\n   * @param {string} value - The digit or character to add.\n   * @param {boolean} [repeating=true] - Whether to use the repeating format pattern. Defaults to `true`.\n   * @returns {HTMLElement} The inserted digit or spacer element.\n   * @throws {Error} If the format string is invalid or lacks digits.\n   */\n  addDigit(value: string, repeating?: boolean): HTMLElement {\n    repeating ??= true;\n    if (value === '-') {\n      return this.addSpacer(value, null, 'odometer-negation-mark');\n    }\n\n    if (value === '.') {\n      return this.addSpacer(\n        this.format.radix ?? '.',\n        null,\n        'odometer-radix-mark'\n      );\n    }\n\n    if (repeating) {\n      let resetted = false;\n      while (true) {\n        if (!this.format.repeating.length) {\n          if (resetted) {\n            throw new Error('Bad odometer format without digits');\n          }\n\n          this.resetFormat();\n          resetted = true;\n        }\n\n        const chr = this.format.repeating[this.format.repeating.length - 1];\n        this.format.repeating = this.format.repeating.substring(\n          0,\n          this.format.repeating.length - 1\n        );\n\n        if (chr === 'd') {\n          break;\n        }\n\n        this.addSpacer(chr);\n      }\n    }\n\n    const digit = this.renderDigit();\n    digit.querySelector('.odometer-value')!.innerHTML = value;\n    this.digits.push(digit);\n\n    return this.insertDigit(digit);\n  }\n\n  /**\n   * Animates the odometer to transition to a new value.\n   * Chooses the appropriate animation method (`count` or `slide`) based on the configuration and browser support.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animate(newValue: number): void {\n    if (!TRANSITION_SUPPORT || this.options.animation === 'count') {\n      this.animateCount(newValue);\n    } else {\n      this.animateSlide(newValue);\n    }\n  }\n\n  /**\n   * Animates the odometer by incrementing or decrementing the value over time.\n   * Uses a \"counting\" animation to transition smoothly to the new value.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animateCount(newValue: number): void {\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - this.value;\n    if (!diff) {\n      return;\n    }\n\n    const start = now();\n    let last = start;\n\n    let cur = this.value;\n    let tick = () => {\n      if (now() - start > (this.options.duration || 0)) {\n        this.value = newValue;\n        this.render();\n        trigger(this.el, 'odometerdone');\n        return;\n      }\n\n      const delta = now() - last;\n\n      if (delta > COUNT_MS_PER_FRAME) {\n        last = now();\n\n        const fraction = delta / (this.options.duration || 0);\n        const dist = diff * fraction;\n\n        cur += dist;\n        this.render(Math.round(cur));\n      }\n\n      if (requestAnimationFrame) {\n        requestAnimationFrame(tick);\n      } else {\n        setTimeout(tick, COUNT_MS_PER_FRAME);\n      }\n    };\n\n    tick();\n  }\n\n  /**\n   * Calculates the number of digits in the largest absolute value from the provided numbers.\n   * @param {...number} values - A list of numbers to evaluate.\n   * @returns {number} The number of digits in the largest absolute value.\n   */\n  getDigitCount(...values: number[]): number {\n    for (let i = 0; i < values.length; i++) {\n      values[i] = Math.abs(values[i]);\n    }\n\n    const max = Math.max(...values);\n\n    return Math.ceil(Math.log(max + 1) / Math.log(10));\n  }\n\n  /**\n   * Calculates the maximum number of fractional digits (decimal places) among the provided numbers.\n   * Assumes the values have already been rounded to the specified precision.\n   * @param {...number} values - A list of numbers to evaluate.\n   * @returns {number} The maximum number of fractional digits.\n   */\n  getFractionalDigitCount(...values: number[]): number {\n    // This assumes the value has already been rounded to\n    // @format.precision places\n    //\n    const parser = /^\\-?\\d*\\.(\\d*?)0*$/;\n    for (let i = 0; i < values.length; i++) {\n      const valueStr = values[i].toString();\n      const parts = parser.exec(valueStr);\n\n      values[i] = parts ? parts[1].length : 0;\n    }\n\n    return Math.max(...values);\n  }\n\n  /**\n   * Resets the odometer's digits and ribbons.\n   * Clears the inner container, resets the format configuration,\n   * and prepares the odometer for re-rendering.\n   * @returns {void}\n   */\n  resetDigits(): void {\n    this.digits = [];\n    this.ribbons = {};\n    this.inside.innerHTML = '';\n    this.resetFormat();\n  }\n\n  /**\n   * Creates an array of numbers between two values\n   * @param start The starting value of the range\n   * @param end The ending value of the range\n   * @param inclusive Whether to include the end value in the range\n   * @returns An array containing the range of numbers\n   */\n  createRange(start: number, end: number, inclusive: boolean): number[] {\n    const isAscending = start < end;\n    const length = Math.abs(end - start) + (inclusive ? 1 : 0);\n\n    return Array.from({ length }, (_, i) =>\n      isAscending ? start + i : start - i\n    );\n  }\n\n  /**\n   * Animates the odometer to transition to a new value using a sliding animation.\n   * Breaks the value into individual digits, calculates the frames for each digit's animation,\n   * and updates the DOM to reflect the sliding effect.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animateSlide(newValue: number): void {\n    let oldValue = this.value;\n\n    // Fix to animate always the fixed decimal digits passed in input\n    const fractionalCount = this.format.precision;\n\n    if (fractionalCount) {\n      newValue = newValue * Math.pow(10, fractionalCount);\n      oldValue = oldValue * Math.pow(10, fractionalCount);\n    }\n\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - oldValue;\n    if (!diff) {\n      return;\n    }\n\n    this.bindTransitionEnd();\n\n    const digits: number[][] = [];\n    const digitCount = this.getDigitCount(oldValue, newValue);\n    let boosted = 0;\n    let start = oldValue;\n\n    // We create an array to represent the series of digits which should be\n    // animated in each column\n    for (let i = 0; i < digitCount; i++) {\n      // We need to get the digit at the current position\n      start = truncate(oldValue / Math.pow(10, digitCount - i - 1));\n      const end = truncate(newValue / Math.pow(10, digitCount - i - 1));\n\n      const dist = end - start;\n\n      let frames: number[];\n      if (Math.abs(dist) > this.MAX_VALUES) {\n        // We need to subsample\n        frames = [];\n\n        // Subsequent digits need to be faster than previous ones\n        const incr =\n          dist /\n          (this.MAX_VALUES + this.MAX_VALUES * boosted * DIGIT_SPEEDBOOST);\n        let cur = start;\n\n        while ((dist > 0 && cur < end) || (dist < 0 && cur > end)) {\n          frames.push(Math.round(cur));\n          cur += incr;\n        }\n\n        if (frames[frames.length - 1] !== end) {\n          frames.push(end);\n        }\n\n        boosted++;\n      } else {\n        frames = this.createRange(start, end, true);\n      }\n\n      // We only care about the last digit\n      for (let j = 0; j < frames.length; j++) {\n        frames[j] = Math.abs(frames[j] % 10);\n      }\n\n      digits.push(frames);\n    }\n\n    this.resetDigits();\n\n    const reversedDigits = digits.reverse();\n    for (let i = 0; i < reversedDigits.length; i++) {\n      let frames = reversedDigits[i];\n      if (!this.digits[i]) {\n        this.addDigit(' ', i >= fractionalCount);\n      }\n\n      if (this.ribbons[i] === undefined) {\n        this.ribbons[i] = this.digits[i].querySelector(\n          '.odometer-ribbon-inner'\n        ) as HTMLElement;\n      }\n      this.ribbons[i].innerHTML = '';\n\n      if (diff < 0) {\n        frames = frames.reverse();\n      }\n\n      for (let j = 0; j < frames.length; j++) {\n        const frame = frames[j];\n        const numEl = document.createElement('div');\n        numEl.className = 'odometer-value';\n        numEl.innerHTML = frame.toString();\n\n        this.ribbons[i].appendChild(numEl);\n\n        if (j === frames.length - 1) {\n          addClass(numEl, 'odometer-last-value');\n        }\n        if (j === 0) {\n          addClass(numEl, 'odometer-first-value');\n        }\n      }\n    }\n\n    if (start < 0) {\n      this.addDigit('-');\n    }\n\n    const mark = this.inside.querySelector('.odometer-radix-mark');\n    if (mark) {\n      mark.parentNode!.removeChild(mark);\n    }\n\n    if (fractionalCount) {\n      this.addSpacer(\n        this.format.radix ?? '.',\n        this.digits[fractionalCount - 1],\n        'odometer-radix-mark'\n      );\n    }\n  }\n\n  /**\n   * Initializes all odometer elements on the page.\n   * Selects elements matching the configured selector or the default `.odometer` class,\n   * and creates a `TmOdometer` instance for each element.\n   * @returns {TmOdometer[]} An array of initialized `TmOdometer` instances.\n   */\n  static init(): TmOdometer[] {\n    if (!document.querySelectorAll) {\n      // IE 7 or 8 in Quirksmode\n      return [];\n    }\n\n    const elements = document.querySelectorAll(\n      TmOdometer.options.selector || '.odometer'\n    ) as NodeListOf<HTMLElement>;\n\n    return Array.from(\n      elements,\n      (el) =>\n        (el.odometer = new TmOdometer({\n          el,\n          value: el.innerText ?? el.textContent,\n        }))\n    );\n  }\n}\n\n// Initialize TmOdometer global options with a deferred execution\ninitGlobalOptionsDeferred(TmOdometer);\n\n// Initialize all existing TmOdometer instances on the page when the DOM is fully loaded\ninitExistingOdometers(TmOdometer);\n\n// Add TmOdometer jQuery support\ntryWrapJQuery();\n\nexport { TmOdometer };\n"],"names":["FORMAT_PARSER","MS_PER_FRAME","transitionCheckStyles","document","createElement","style","TRANSITION_SUPPORT","transition","webkitTransition","mozTransition","oTransition","requestAnimationFrame","window","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","MutationObserver","WebKitMutationObserver","MozMutationObserver","_jQueryWrapped","wrapJQuery","jQuery","property","old","fn","val","_a","this","odometer","apply","arguments","update","createFromHTML","html","el","innerHTML","children","Error","removeClass","name","className","replace","RegExp","split","join","addClass","trigger","CustomEvent","evt","bubbles","cancelable","dispatchEvent","createEvent","initEvent","now","left","_b","performance","call","Date","truncate","Math","ceil","floor","TmOdometerClass","TmOdometer","constructor","options","value","watchMutations","transitionEndBound","format","repeating","precision","digits","ribbons","key","_d","_e","duration","MAX_VALUES","resetFormat","cleanValue","_c","renderInside","render","Object","defineProperty","get","inside","outerHTML","innerText","textContent","set","e","watchForMutations","appendChild","observer","mutations","newVal","startWatchingMutations","observe","childList","stopWatchingMutations","disconnect","radix","parseFloat","pow","round","bindTransitionEnd","renderEnqueued","events","event","addEventListener","setTimeout","parsed","exec","_","fractional","length","theme","classes","newClasses","cls","match","test","push","formatDigits","formatFunction","valueString","valueDigit","reverse","digit","renderDigit","querySelector","insertDigit","addSpacer","preservePrecision","wholePart","addDigit","fixedValue","toString","parts","i","newValue","diff","animate","offsetHeight","before","insertBefore","chr","extraClasses","spacer","resetted","substring","animation","animateSlide","animateCount","start","last","cur","tick","delta","fraction","getDigitCount","values","abs","max","log","getFractionalDigitCount","parser","valueStr","resetDigits","createRange","end","inclusive","isAscending","Array","from","oldValue","fractionalCount","digitCount","boosted","dist","frames","incr","j","reversedDigits","undefined","frame","numEl","mark","parentNode","removeChild","init","querySelectorAll","elements","selector","odometerOptions","documentElement","doScroll","createEventObject","_old","onreadystatechange","readyState","auto","initExistingOdometers"],"mappings":"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"}