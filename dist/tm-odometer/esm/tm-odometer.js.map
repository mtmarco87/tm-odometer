{"version":3,"file":"tm-odometer.js","sources":["../../../../../src/lib/shared/templates.ts","../../../../../src/lib/shared/settings.ts","../../../../../src/lib/utils/compatibility.ts","../../../../../src/lib/utils/utilities.ts","../../../../../src/lib/core/tm-odometer.ts"],"sourcesContent":["/**\n * Templates for odometer elements\n */\n\nconst VALUE_HTML = '<span class=\"odometer-value\"></span>';\nconst RIBBON_HTML =\n  '<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">' +\n  VALUE_HTML +\n  '</span></span>';\nconst DIGIT_HTML =\n  '<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">' +\n  RIBBON_HTML +\n  '</span></span>';\nconst FORMAT_MARK_HTML = '<span class=\"odometer-formatting-mark\"></span>';\n\nexport { DIGIT_HTML, FORMAT_MARK_HTML };\n","/**\n * Settings\n */\n\n// Default odometer configuration\n\n// The bit within the parenthesis will be repeated, so (,ddd) becomes 123,456,789....\n//\n// If your locale uses spaces to separate digits, you could consider using a\n// Narrow No-Break Space ( ), as it's a bit more correct.\n//\n// Numbers will be rounded to the number of digits after the radix separator.\n//\n// When values are set using `.update` or the `.innerHTML`-type attributes,\n// strings are assumed to already be in the locale's format.\n//\n// This is just the default, it can also be set as options.format.\nconst DIGIT_FORMAT = '(,ddd).dd';\n\nconst FORMAT_PARSER = /^\\(?([^)]*)\\)?(?:(.)(d+))?$/;\n\n// What is our target framerate?\nconst FRAMERATE = 30;\n\n// How long will the animation last?\nconst DURATION = 2000;\n\n// What is the fastest we should update values when we are\n// counting up (not using the wheel animation).\nconst COUNT_FRAMERATE = 20;\n\n// What is the minimum number of frames for each value on the wheel?\n// We won't render more values than could be reasonably seen\nconst FRAMES_PER_VALUE = 2;\n\n// If more than one digit is hitting the frame limit, they would all get\n// capped at that limit and appear to be moving at the same rate.  This\n// factor adds a boost to subsequent digits to make them appear faster.\nconst DIGIT_SPEEDBOOST = 0.5;\n\nconst MS_PER_FRAME = 1000 / FRAMERATE;\nconst COUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE;\n\nexport {\n  DIGIT_FORMAT,\n  FORMAT_PARSER,\n  DURATION,\n  FRAMES_PER_VALUE,\n  DIGIT_SPEEDBOOST,\n  MS_PER_FRAME,\n  COUNT_MS_PER_FRAME,\n};\n","/**\n * Compatibility Layer\n */\n\nconst TRANSITION_END_EVENTS =\n  'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';\n\nconst transitionCheckStyles = document.createElement('div').style;\nconst TRANSITION_SUPPORT =\n  transitionCheckStyles.transition != null ||\n  transitionCheckStyles.webkitTransition != null ||\n  transitionCheckStyles.mozTransition != null ||\n  transitionCheckStyles.oTransition != null;\n\nconst requestAnimationFrame =\n  window.requestAnimationFrame ||\n  window.mozRequestAnimationFrame ||\n  window.webkitRequestAnimationFrame ||\n  window.msRequestAnimationFrame;\n\nconst MutationObserver =\n  window.MutationObserver ||\n  window.WebKitMutationObserver ||\n  window.MozMutationObserver;\n\nlet _jQueryWrapped = false;\n\n/**\n * Wraps jQuery's `.html` and `.text` methods to ensure they update the odometer\n * when called on elements with an associated `TmOdometer` instance.\n * This function is idempotent and will only execute once.\n * @returns {void}\n */\nconst wrapJQuery = (): void => {\n  if (_jQueryWrapped) {\n    return;\n  }\n\n  if (window.jQuery) {\n    _jQueryWrapped = true;\n    // We need to wrap jQuery's .html and .text because they don't always\n    // call .innerHTML/.innerText\n    for (const property of ['html', 'text']) {\n      const old = window.jQuery!.fn[property];\n      window.jQuery!.fn[property] = function (val?: any) {\n        if (val == null || this[0]?.odometer == null) {\n          return old.apply(this, arguments);\n        }\n        return this[0].odometer.update(val);\n      };\n    }\n  }\n};\n\n/**\n * Attempts to wrap jQuery's `.html` and `.text` methods immediately to ensure they\n * update the odometer when called on elements with an associated `TmOdometer` instance.\n * Also schedules a retry using `setTimeout` in case jQuery is loaded after this file.\n * @returns {void}\n */\nconst tryWrapJQuery = (): void => {\n  wrapJQuery();\n  // In case jQuery is brought in after this file\n  setTimeout(wrapJQuery, 0);\n};\n\nexport {\n  TRANSITION_END_EVENTS,\n  TRANSITION_SUPPORT,\n  requestAnimationFrame,\n  MutationObserver,\n  tryWrapJQuery,\n};\n","/**\n * Utility Functions\n */\n\nimport { type TmOdometer } from '../core/tm-odometer';\n\n/**\n * Creates an HTML element from the given HTML string.\n * Assumes the HTML string contains a single root element.\n * @param {string} html - The HTML string to convert to an element.\n * @returns {HTMLElement} The first child element created from the HTML string.\n * @throws {Error} If the HTML string is empty or does not contain a valid element.\n */\nconst createFromHTML = (html: string): HTMLElement => {\n  const el = document.createElement('div');\n  el.innerHTML = html;\n  if (!el.children[0]) {\n    throw new Error('Invalid HTML: No valid root element found.');\n  }\n  return el.children[0] as HTMLElement;\n};\n\n/**\n * Removes one or more class names from an element.\n * If any of the class names do not exist, they are ignored.\n * @param {HTMLElement} el - The element to remove the class(es) from.\n * @param {string} name - A space-separated string of class names to remove.\n * @returns {string} The updated `className` string of the element (may contain leading/trailing spaces).\n */\nconst removeClass = (el: HTMLElement, name: string): string =>\n  (el.className = el.className.replace(\n    new RegExp(`(^| )${name.split(' ').join('|')}( |$)`, 'gi'),\n    ' '\n  ));\n\n/**\n * Adds one or more class names to an element.\n * If any of the class names already exist, they will not be duplicated.\n * @param {HTMLElement} el - The element to add the class(es) to.\n * @param {string} name - A space-separated string of class names to add.\n * @returns {string} The updated `className` string of the element (may contain leading/trailing spaces).\n */\nconst addClass = (el: HTMLElement, name: string): string => {\n  removeClass(el, name);\n  return (el.className += ` ${name}`);\n};\n\n/**\n * Triggers a custom DOM event on the specified element.\n * Supports modern browsers and provides a fallback for older browsers (e.g., IE9+).\n * @param {HTMLElement} el - The element on which to dispatch the event.\n * @param {string} name - The name of the event to trigger.\n */\nconst trigger = (el: HTMLElement, name: string): void => {\n  // Custom DOM events are not supported in IE8\n  if (typeof CustomEvent === 'function') {\n    const evt = new CustomEvent(name, { bubbles: true, cancelable: true });\n    el.dispatchEvent(evt);\n  } else if (document.createEvent) {\n    // Legacy fallback\n    const evt = document.createEvent('HTMLEvents');\n    evt.initEvent(name, true, true);\n    el.dispatchEvent(evt);\n  }\n};\n\n/**\n * Returns the current timestamp in milliseconds.\n * Uses `window.performance.now()` if available for higher precision,\n * falling back to `Date.now()` if not.\n * @returns {number} The current timestamp in milliseconds.\n */\nconst now = (): number => {\n  const left = window.performance?.now?.();\n  return left ?? +new Date();\n};\n\n/**\n * Rounds a number to the specified precision.\n * If no precision is provided, the number is rounded to the nearest integer.\n * @param {number} val - The number to round.\n * @param {number} [precision=0] - The number of decimal places to round to. Defaults to 0.\n * @returns {number} The rounded number.\n */\nconst round = (val: number, precision?: number): number => {\n  precision ??= 0;\n  if (!precision) {\n    return Math.round(val);\n  }\n\n  val *= Math.pow(10, precision);\n  val += 0.5;\n  val = Math.floor(val);\n  return (val /= Math.pow(10, precision));\n};\n\n/**\n * Truncates a number by removing its fractional part.\n * For positive numbers, it behaves like `Math.floor`.\n * For negative numbers, it behaves like `Math.ceil`.\n * @param {number} val - The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncate = (val: number): number => {\n  // | 0 fails on numbers greater than 2^32\n  if (val < 0) {\n    return Math.ceil(val);\n  } else {\n    return Math.floor(val);\n  }\n};\n\n/**\n * Calculates the fractional part of a number.\n * The fractional part is the difference between the number and its rounded value.\n * @param {number} val - The number to extract the fractional part from.\n * @returns {number} The fractional part of the number.\n */\nconst fractionalPart = (val: number): number => val - round(val);\n\n/**\n * Initializes global options for the provided `TmOdometer` class with a deferred execution.\n * Sets the static `options` object of the `TmOdometer` class based on `window.odometerOptions`.\n * This allows users to configure `window.odometerOptions` after the script has been loaded.\n * The function re-checks `window.odometerOptions` after a short timeout to apply any late configurations.\n * @param {typeof TmOdometer} TmOdometerClass - The `TmOdometer` class to initialize options for.\n * @returns {void}\n */\nconst initGlobalOptionsDeferred = (\n  TmOdometerClass: typeof TmOdometer\n): void => {\n  setTimeout(() => {\n    // We do this in a separate pass to allow people to set\n    // window.odometerOptions after bringing the file in.\n    if (window.odometerOptions) {\n      for (const key in window.odometerOptions) {\n        TmOdometerClass.options[key] ??= window.odometerOptions[key];\n      }\n    }\n  }, 0);\n};\n\n/**\n * Initializes all existing `TmOdometer` instances on the page when the DOM is fully loaded.\n * Supports both modern browsers and legacy browsers (e.g., IE < 9).\n * Ensures that initialization occurs after the DOM is ready, using `DOMContentLoaded` for modern browsers\n * and `onreadystatechange` for older browsers.\n * @param {typeof TmOdometer} TmOdometerClass - The `TmOdometer` class to initialize instances for.\n * @returns {void}\n */\nconst initExistingOdometers = (TmOdometerClass: typeof TmOdometer): void => {\n  // Check for legacy IE < 9\n  if (document.documentElement?.doScroll && document.createEventObject) {\n    // Use `onreadystatechange` for legacy browsers\n    const _old = document.onreadystatechange;\n    document.onreadystatechange = function () {\n      if (\n        document.readyState === 'complete' &&\n        TmOdometerClass.options.auto !== false\n      ) {\n        TmOdometerClass.init();\n      }\n\n      // Call the previous handler if it exists\n      if (_old) {\n        _old?.apply(this, arguments as any);\n      }\n    };\n  } else {\n    // Use `DOMContentLoaded` for modern browsers\n    document.addEventListener(\n      'DOMContentLoaded',\n      function () {\n        if (TmOdometerClass.options.auto !== false) {\n          TmOdometerClass.init();\n        }\n      },\n      false\n    );\n  }\n};\n\nexport {\n  createFromHTML,\n  removeClass,\n  addClass,\n  trigger,\n  now,\n  round,\n  truncate,\n  fractionalPart,\n  initGlobalOptionsDeferred,\n  initExistingOdometers,\n};\n","/**\n * TmOdometer Core Class\n */\n\nimport {\n  FormatObject,\n  OdometerOptions,\n  TmOdometerOptions,\n} from '../shared/interfaces';\nimport { DIGIT_HTML, FORMAT_MARK_HTML } from '../shared/templates';\nimport {\n  DIGIT_FORMAT,\n  FORMAT_PARSER,\n  DURATION,\n  FRAMES_PER_VALUE,\n  DIGIT_SPEEDBOOST,\n  MS_PER_FRAME,\n  COUNT_MS_PER_FRAME,\n} from '../shared/settings';\nimport {\n  TRANSITION_END_EVENTS,\n  TRANSITION_SUPPORT,\n  requestAnimationFrame,\n  MutationObserver,\n  tryWrapJQuery,\n} from '../utils/compatibility';\nimport {\n  createFromHTML,\n  removeClass,\n  addClass,\n  trigger,\n  now,\n  round,\n  truncate,\n  initGlobalOptionsDeferred,\n  initExistingOdometers,\n} from '../utils/utilities';\n\nclass TmOdometer {\n  static options: OdometerOptions = window.odometerOptions ?? {};\n\n  options: TmOdometerOptions;\n  el: HTMLElement;\n  value: number = 0;\n  inside!: HTMLElement;\n  observer?: MutationObserver;\n  watchMutations: boolean = false;\n  transitionEndBound: boolean = false;\n  format: FormatObject = { repeating: '', precision: 0 };\n  MAX_VALUES!: number;\n  digits: HTMLElement[] = [];\n  ribbons: Record<number, HTMLElement> = {};\n\n  /**\n   * Initializes a new instance of the TmOdometer class.\n   * Sets up the odometer's options, formats, and DOM structure.\n   * If an odometer instance already exists on the element, it returns the existing instance.\n   * @param {TmOdometerOptions} options - Configuration options for the odometer.\n   */\n  constructor(options: TmOdometerOptions) {\n    this.options = options;\n    this.el = this.options.el;\n    if (this.el.odometer) {\n      return this.el.odometer;\n    }\n\n    this.el.odometer = this;\n\n    for (const key in TmOdometer.options) {\n      const value = TmOdometer.options[key];\n      this.options[key] ??= value;\n    }\n\n    this.options.duration ??= DURATION;\n    this.MAX_VALUES =\n      (this.options.duration / MS_PER_FRAME / FRAMES_PER_VALUE) | 0;\n\n    this.resetFormat();\n\n    this.value = this.cleanValue(this.options.value ?? '');\n\n    this.renderInside();\n    this.render();\n\n    try {\n      for (const property of ['innerHTML', 'innerText', 'textContent']) {\n        if (this.el[property as keyof HTMLElement]) {\n          Object.defineProperty(this.el, property, {\n            get: (): string => {\n              if (property === 'innerHTML') {\n                return this.inside.outerHTML;\n              } else {\n                // It's just a single HTML element, so innerText is the\n                // same as outerText.\n                return this.inside.innerText ?? this.inside.textContent ?? '';\n              }\n            },\n            set: (val: string) => {\n              return this.update(val);\n            },\n          });\n        }\n      }\n    } catch (e) {\n      // Safari\n      this.watchForMutations();\n    }\n  }\n\n  /**\n   * Renders the inner container of the odometer.\n   * Clears the root element (`this.el`) and appends a new child element\n   * with the class `odometer-inside`.\n   * @returns {void}\n   */\n  renderInside(): void {\n    this.inside = document.createElement('div');\n    this.inside.className = 'odometer-inside';\n    this.el.innerHTML = '';\n    this.el.appendChild(this.inside);\n  }\n\n  /**\n   * Observes changes to the root element's content and updates the odometer accordingly.\n   * This is a fallback for environments like Safari where `.innerHTML` cannot be wrapped.\n   * @returns {void}\n   */\n  watchForMutations(): void {\n    if (!MutationObserver) {\n      return;\n    }\n\n    try {\n      this.observer ??= new MutationObserver((mutations) => {\n        const newVal = this.el.innerText || '';\n\n        this.renderInside();\n        this.render(this.value);\n        this.update(newVal);\n      });\n\n      this.watchMutations = true;\n      this.startWatchingMutations();\n    } catch (e) {}\n  }\n\n  /**\n   * Starts observing mutations on the root element (`this.el`).\n   * Listens for changes to the element's child nodes (e.g., additions or removals).\n   * Requires `this.watchMutations` to be `true` and a `MutationObserver` to be initialized.\n   * @returns {void}\n   */\n  startWatchingMutations(): void {\n    if (this.watchMutations) {\n      this.observer?.observe(this.el, { childList: true });\n    }\n  }\n\n  /**\n   * Stops observing mutations on the root element (`this.el`).\n   * Disconnects the `MutationObserver` if it is initialized.\n   * @returns {void}\n   */\n  stopWatchingMutations(): void {\n    this.observer?.disconnect();\n  }\n\n  /**\n   * Cleans and normalizes a value to ensure it can be processed as a number.\n   * Converts formatted strings into numeric values by handling radix symbols\n   * and removing unnecessary characters.\n   * @param {string | number} val - The value to clean and normalize.\n   * @returns {number} The cleaned and rounded numeric value.\n   */\n  cleanValue(val: string | number): number {\n    if (typeof val === 'string') {\n      // We need to normalize the format so we can properly turn it into\n      // a float.\n      val = val.replace(this.format.radix ?? '.', '<radix>');\n      val = val.replace(/[.,]/g, '');\n      val = val.replace('<radix>', '.');\n      val = parseFloat(val) || 0;\n    }\n\n    return round(val, this.format.precision);\n  }\n\n  /**\n   * Binds transition end events to the root element (`this.el`).\n   * Ensures that the odometer re-renders only once per transition, even if multiple\n   * transition end events are triggered. After rendering, it dispatches the\n   * `odometerdone` custom event.\n   * @returns {void}\n   */\n  bindTransitionEnd(): void {\n    if (this.transitionEndBound) {\n      return;\n    }\n    this.transitionEndBound = true;\n\n    // The event will be triggered once for each ribbon, we only\n    // want one render though\n    let renderEnqueued = false;\n    const events = TRANSITION_END_EVENTS.split(' ');\n    for (const event of events) {\n      this.el.addEventListener(\n        event,\n        () => {\n          if (renderEnqueued) {\n            return true;\n          }\n\n          renderEnqueued = true;\n\n          setTimeout(() => {\n            this.render();\n            renderEnqueued = false;\n            trigger(this.el, 'odometerdone');\n          }, 0);\n\n          return true;\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * Resets and parses the odometer's format configuration.\n   * Extracts the repeating pattern, radix symbol, and precision from the format string.\n   * Throws an error if the format string is invalid or unparsable.\n   * @returns {void}\n   */\n  resetFormat(): void {\n    let format = this.options.format ?? DIGIT_FORMAT;\n    format = format || 'd';\n\n    const parsed = FORMAT_PARSER.exec(format);\n    if (!parsed) {\n      throw new Error('TmOdometer: Unparsable digit format');\n    }\n\n    const [_, repeating, radix, fractional] = parsed;\n\n    const precision = fractional?.length || 0;\n\n    this.format = { repeating, radix, precision };\n  }\n\n  /**\n   * Renders the odometer with the specified value.\n   * Updates the DOM structure, applies the appropriate theme and classes,\n   * and formats the digits for display.\n   * @param {number} [value] - The value to render. Defaults to the current value (`this.value`).\n   * @returns {void}\n   */\n  render(value?: number): void {\n    value ??= this.value;\n    this.stopWatchingMutations();\n    this.resetFormat();\n\n    this.inside.innerHTML = '';\n\n    let { theme } = this.options;\n\n    const classes = this.el.className.split(' ');\n    const newClasses: string[] = [];\n    for (const cls of classes) {\n      if (cls.length) {\n        const match = /^odometer-theme-(.+)$/.exec(cls);\n        if (match) {\n          theme = match[1];\n          continue;\n        }\n\n        if (/^odometer(-|$)/.test(cls)) {\n          continue;\n        }\n\n        newClasses.push(cls);\n      }\n    }\n\n    newClasses.push('odometer');\n\n    if (!TRANSITION_SUPPORT) {\n      newClasses.push('odometer-no-transitions');\n    }\n\n    if (theme) {\n      newClasses.push(`odometer-theme-${theme}`);\n    } else {\n      // This class matches all themes, so it should do what you'd expect if only one\n      // theme css file is brought into the page.\n      newClasses.push('odometer-auto-theme');\n    }\n\n    this.el.className = newClasses.join(' ');\n\n    this.ribbons = {};\n\n    this.formatDigits(value);\n\n    this.startWatchingMutations();\n  }\n\n  /**\n   * Formats the given value into individual digits and renders them.\n   * If a custom format function is provided, it uses that to format the value.\n   * Otherwise, it preserves the precision and formats the value based on the odometer's configuration.\n   * @param {number} value - The value to format and render as digits.\n   * @returns {void}\n   */\n  formatDigits(value: number): void {\n    this.digits = [];\n\n    if (this.options.formatFunction) {\n      const valueString = this.options.formatFunction(value);\n      for (const valueDigit of valueString.split('').reverse()) {\n        if (valueDigit.match(/0-9/)) {\n          const digit = this.renderDigit();\n          digit.querySelector('.odometer-value')!.innerHTML = valueDigit;\n          this.digits.push(digit);\n          this.insertDigit(digit);\n        } else {\n          this.addSpacer(valueDigit);\n        }\n      }\n    } else {\n      const valueString = this.preservePrecision(value);\n      let wholePart = !this.format.precision;\n      for (const digit of valueString.split('').reverse()) {\n        if (digit === '.') {\n          wholePart = true;\n        }\n        this.addDigit(digit, wholePart);\n      }\n    }\n  }\n\n  /**\n   * Ensures the value maintains the specified precision by adding trailing zeros if necessary.\n   * This is used to keep the decimal places consistent at the end of the animation.\n   * @param {number} value - The numeric value to format with preserved precision.\n   * @returns {string} The value as a string with the required precision.\n   */\n  preservePrecision(value: number): string {\n    // This function fixes the precision at the end of the animation keeping the\n    // decimal places even if we have 0 digits only\n    let fixedValue: string = value.toString();\n    if (this.format.precision) {\n      const parts = fixedValue.split('.');\n      if (parts.length === 1) {\n        fixedValue += '.';\n        parts[1] = '';\n      }\n      for (let i = 0; i < this.format.precision; i++) {\n        if (!parts[1][i]) {\n          fixedValue += '0';\n        }\n      }\n    }\n    return fixedValue;\n  }\n\n  /**\n   * Updates the odometer to display a new value.\n   * Cleans and normalizes the input value, determines the difference from the current value,\n   * and triggers the appropriate animations and DOM updates.\n   * @param {string | number} newValue - The new value to update the odometer to.\n   * @returns {number} The updated value of the odometer.\n   */\n  update(newValue: string | number): number {\n    newValue = this.cleanValue(newValue);\n\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - this.value;\n    if (!diff) {\n      return this.value;\n    }\n\n    removeClass(\n      this.el,\n      'odometer-animating-up odometer-animating-down odometer-animating'\n    );\n    if (diff > 0) {\n      addClass(this.el, 'odometer-animating-up');\n    } else {\n      addClass(this.el, 'odometer-animating-down');\n    }\n\n    this.stopWatchingMutations();\n    this.animate(newValue);\n    this.startWatchingMutations();\n\n    setTimeout(() => {\n      // Force a repaint\n      this.el.offsetHeight;\n      addClass(this.el, 'odometer-animating');\n    }, 0);\n\n    this.value = newValue;\n\n    return this.value;\n  }\n\n  /**\n   * Creates and returns a new digit element for the odometer.\n   * The digit element is generated from the predefined `DIGIT_HTML` template.\n   * @returns {HTMLElement} The newly created digit element.\n   */\n  renderDigit(): HTMLElement {\n    return createFromHTML(DIGIT_HTML);\n  }\n\n  /**\n   * Inserts a digit element into the odometer's inner container.\n   * If a reference element (`before`) is provided, the digit is inserted before it.\n   * Otherwise, the digit is appended to the container or inserted at the beginning if other children exist.\n   * @param {HTMLElement} digit - The digit element to insert.\n   * @param {HTMLElement | null} [before] - The reference element to insert the digit before. Defaults to `null`.\n   * @returns {HTMLElement} The inserted digit element.\n   */\n  insertDigit(digit: HTMLElement, before?: HTMLElement | null): HTMLElement {\n    if (before) {\n      return this.inside.insertBefore(digit, before);\n    } else if (!this.inside.children.length) {\n      return this.inside.appendChild(digit);\n    } else {\n      return this.inside.insertBefore(digit, this.inside.children[0]);\n    }\n  }\n\n  /**\n   * Creates and inserts a spacer element into the odometer's inner container.\n   * A spacer is a non-digit element (e.g., a comma or decimal point) used for formatting.\n   * @param {string} chr - The character to display in the spacer.\n   * @param {HTMLElement | null} [before] - The reference element to insert the spacer before. Defaults to `null`.\n   * @param {string} [extraClasses] - Additional CSS classes to apply to the spacer element.\n   * @returns {HTMLElement} The inserted spacer element.\n   */\n  addSpacer(\n    chr: string,\n    before?: HTMLElement | null,\n    extraClasses?: string\n  ): HTMLElement {\n    const spacer = createFromHTML(FORMAT_MARK_HTML);\n    spacer.innerHTML = chr;\n    if (extraClasses) {\n      addClass(spacer, extraClasses);\n    }\n    return this.insertDigit(spacer, before);\n  }\n\n  /**\n   * Adds a digit or spacer element to the odometer's inner container.\n   * Handles special cases for negation (`-`) and radix (`.`) characters,\n   * and ensures the format's repeating pattern is respected.\n   * @param {string} value - The digit or character to add.\n   * @param {boolean} [repeating=true] - Whether to use the repeating format pattern. Defaults to `true`.\n   * @returns {HTMLElement} The inserted digit or spacer element.\n   * @throws {Error} If the format string is invalid or lacks digits.\n   */\n  addDigit(value: string, repeating?: boolean): HTMLElement {\n    repeating ??= true;\n    if (value === '-') {\n      return this.addSpacer(value, null, 'odometer-negation-mark');\n    }\n\n    if (value === '.') {\n      return this.addSpacer(\n        this.format.radix ?? '.',\n        null,\n        'odometer-radix-mark'\n      );\n    }\n\n    if (repeating) {\n      let resetted = false;\n      while (true) {\n        if (!this.format.repeating.length) {\n          if (resetted) {\n            throw new Error('Bad odometer format without digits');\n          }\n\n          this.resetFormat();\n          resetted = true;\n        }\n\n        const chr = this.format.repeating[this.format.repeating.length - 1];\n        this.format.repeating = this.format.repeating.substring(\n          0,\n          this.format.repeating.length - 1\n        );\n\n        if (chr === 'd') {\n          break;\n        }\n\n        this.addSpacer(chr);\n      }\n    }\n\n    const digit = this.renderDigit();\n    digit.querySelector('.odometer-value')!.innerHTML = value;\n    this.digits.push(digit);\n\n    return this.insertDigit(digit);\n  }\n\n  /**\n   * Animates the odometer to transition to a new value.\n   * Chooses the appropriate animation method (`count` or `slide`) based on the configuration and browser support.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animate(newValue: number): void {\n    if (!TRANSITION_SUPPORT || this.options.animation === 'count') {\n      this.animateCount(newValue);\n    } else {\n      this.animateSlide(newValue);\n    }\n  }\n\n  /**\n   * Animates the odometer by incrementing or decrementing the value over time.\n   * Uses a \"counting\" animation to transition smoothly to the new value.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animateCount(newValue: number): void {\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - this.value;\n    if (!diff) {\n      return;\n    }\n\n    const start = now();\n    let last = start;\n\n    let cur = this.value;\n    let tick = () => {\n      if (now() - start > (this.options.duration || 0)) {\n        this.value = newValue;\n        this.render();\n        trigger(this.el, 'odometerdone');\n        return;\n      }\n\n      const delta = now() - last;\n\n      if (delta > COUNT_MS_PER_FRAME) {\n        last = now();\n\n        const fraction = delta / (this.options.duration || 0);\n        const dist = diff * fraction;\n\n        cur += dist;\n        this.render(Math.round(cur));\n      }\n\n      if (requestAnimationFrame) {\n        requestAnimationFrame(tick);\n      } else {\n        setTimeout(tick, COUNT_MS_PER_FRAME);\n      }\n    };\n\n    tick();\n  }\n\n  /**\n   * Calculates the number of digits in the largest absolute value from the provided numbers.\n   * @param {...number} values - A list of numbers to evaluate.\n   * @returns {number} The number of digits in the largest absolute value.\n   */\n  getDigitCount(...values: number[]): number {\n    for (let i = 0; i < values.length; i++) {\n      values[i] = Math.abs(values[i]);\n    }\n\n    const max = Math.max(...values);\n\n    return Math.ceil(Math.log(max + 1) / Math.log(10));\n  }\n\n  /**\n   * Calculates the maximum number of fractional digits (decimal places) among the provided numbers.\n   * Assumes the values have already been rounded to the specified precision.\n   * @param {...number} values - A list of numbers to evaluate.\n   * @returns {number} The maximum number of fractional digits.\n   */\n  getFractionalDigitCount(...values: number[]): number {\n    // This assumes the value has already been rounded to\n    // @format.precision places\n    //\n    const parser = /^\\-?\\d*\\.(\\d*?)0*$/;\n    for (let i = 0; i < values.length; i++) {\n      const valueStr = values[i].toString();\n      const parts = parser.exec(valueStr);\n\n      values[i] = parts ? parts[1].length : 0;\n    }\n\n    return Math.max(...values);\n  }\n\n  /**\n   * Resets the odometer's digits and ribbons.\n   * Clears the inner container, resets the format configuration,\n   * and prepares the odometer for re-rendering.\n   * @returns {void}\n   */\n  resetDigits(): void {\n    this.digits = [];\n    this.ribbons = {};\n    this.inside.innerHTML = '';\n    this.resetFormat();\n  }\n\n  /**\n   * Creates an array of numbers between two values\n   * @param start The starting value of the range\n   * @param end The ending value of the range\n   * @param inclusive Whether to include the end value in the range\n   * @returns An array containing the range of numbers\n   */\n  createRange(start: number, end: number, inclusive: boolean): number[] {\n    const isAscending = start < end;\n    const length = Math.abs(end - start) + (inclusive ? 1 : 0);\n\n    return Array.from({ length }, (_, i) =>\n      isAscending ? start + i : start - i\n    );\n  }\n\n  /**\n   * Animates the odometer to transition to a new value using a sliding animation.\n   * Breaks the value into individual digits, calculates the frames for each digit's animation,\n   * and updates the DOM to reflect the sliding effect.\n   * @param {number} newValue - The new value to animate the odometer to.\n   * @returns {void}\n   */\n  animateSlide(newValue: number): void {\n    let oldValue = this.value;\n\n    // Fix to animate always the fixed decimal digits passed in input\n    const fractionalCount = this.format.precision;\n\n    if (fractionalCount) {\n      newValue = newValue * Math.pow(10, fractionalCount);\n      oldValue = oldValue * Math.pow(10, fractionalCount);\n    }\n\n    // If the value is the same, we don't need to do anything\n    const diff = newValue - oldValue;\n    if (!diff) {\n      return;\n    }\n\n    this.bindTransitionEnd();\n\n    const digits: number[][] = [];\n    const digitCount = this.getDigitCount(oldValue, newValue);\n    let boosted = 0;\n    let start = oldValue;\n\n    // We create an array to represent the series of digits which should be\n    // animated in each column\n    for (let i = 0; i < digitCount; i++) {\n      // We need to get the digit at the current position\n      start = truncate(oldValue / Math.pow(10, digitCount - i - 1));\n      const end = truncate(newValue / Math.pow(10, digitCount - i - 1));\n\n      const dist = end - start;\n\n      let frames: number[];\n      if (Math.abs(dist) > this.MAX_VALUES) {\n        // We need to subsample\n        frames = [];\n\n        // Subsequent digits need to be faster than previous ones\n        const incr =\n          dist /\n          (this.MAX_VALUES + this.MAX_VALUES * boosted * DIGIT_SPEEDBOOST);\n        let cur = start;\n\n        while ((dist > 0 && cur < end) || (dist < 0 && cur > end)) {\n          frames.push(Math.round(cur));\n          cur += incr;\n        }\n\n        if (frames[frames.length - 1] !== end) {\n          frames.push(end);\n        }\n\n        boosted++;\n      } else {\n        frames = this.createRange(start, end, true);\n      }\n\n      // We only care about the last digit\n      for (let j = 0; j < frames.length; j++) {\n        frames[j] = Math.abs(frames[j] % 10);\n      }\n\n      digits.push(frames);\n    }\n\n    this.resetDigits();\n\n    const reversedDigits = digits.reverse();\n    for (let i = 0; i < reversedDigits.length; i++) {\n      let frames = reversedDigits[i];\n      if (!this.digits[i]) {\n        this.addDigit(' ', i >= fractionalCount);\n      }\n\n      if (this.ribbons[i] === undefined) {\n        this.ribbons[i] = this.digits[i].querySelector(\n          '.odometer-ribbon-inner'\n        ) as HTMLElement;\n      }\n      this.ribbons[i].innerHTML = '';\n\n      if (diff < 0) {\n        frames = frames.reverse();\n      }\n\n      for (let j = 0; j < frames.length; j++) {\n        const frame = frames[j];\n        const numEl = document.createElement('div');\n        numEl.className = 'odometer-value';\n        numEl.innerHTML = frame.toString();\n\n        this.ribbons[i].appendChild(numEl);\n\n        if (j === frames.length - 1) {\n          addClass(numEl, 'odometer-last-value');\n        }\n        if (j === 0) {\n          addClass(numEl, 'odometer-first-value');\n        }\n      }\n    }\n\n    if (start < 0) {\n      this.addDigit('-');\n    }\n\n    const mark = this.inside.querySelector('.odometer-radix-mark');\n    if (mark) {\n      mark.parentNode!.removeChild(mark);\n    }\n\n    if (fractionalCount) {\n      this.addSpacer(\n        this.format.radix ?? '.',\n        this.digits[fractionalCount - 1],\n        'odometer-radix-mark'\n      );\n    }\n  }\n\n  /**\n   * Initializes all odometer elements on the page.\n   * Selects elements matching the configured selector or the default `.odometer` class,\n   * and creates a `TmOdometer` instance for each element.\n   * @returns {TmOdometer[]} An array of initialized `TmOdometer` instances.\n   */\n  static init(): TmOdometer[] {\n    if (!document.querySelectorAll) {\n      // IE 7 or 8 in Quirksmode\n      return [];\n    }\n\n    const elements = document.querySelectorAll(\n      TmOdometer.options.selector || '.odometer'\n    ) as NodeListOf<HTMLElement>;\n\n    return Array.from(\n      elements,\n      (el) =>\n        (el.odometer = new TmOdometer({\n          el,\n          value: el.innerText ?? el.textContent,\n        }))\n    );\n  }\n}\n\n// Initialize TmOdometer global options with a deferred execution\ninitGlobalOptionsDeferred(TmOdometer);\n\n// Initialize all existing TmOdometer instances on the page when the DOM is fully loaded\ninitExistingOdometers(TmOdometer);\n\n// Add TmOdometer jQuery support\ntryWrapJQuery();\n\nexport { TmOdometer };\n"],"names":[],"mappings":"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"}